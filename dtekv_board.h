#ifndef DTEKV_BOARD_H
#define DTEKV_BOARD_H
#include <stdlib.h>

int minesweeper(void);
void test(void);

// Memory Addresses for VGA
#define VGA_Buffer 0x8000000
#define VGA_DMA 0x4000100
#define SWITCH_base 0x4000010
#define KEY1_base 0x40000d0
#define TIMER_base 0x4000020
#define HEX_base 0x4000050
#define SWITCH_BASE 0x4000010  

// Colors 
#define black     0x00
#define white     0xFF
#define red       0xE0
#define yellow    0xFC
#define green     0x1C
#define blue      0x03
#define cyan      0x1F
#define magenta   0xE3
#define gray      0x92
#define dark_gray 0x49
#define light_blue 0x9F
#define orange    0xFC 
#define light_gray 0xE4 
#define light_green 0x7C
#define light_red 0xF4
#define light_yellow 0xFE
#define purple    0xA3
#define brown     0xB2
#define pink      0xF3
#define light_cyan 0xBF
#define light_magenta 0xF3
#define dark_blue 0x02
#define dark_green 0x0C
#define pastel_pink 0xF5 
#define pastel_yellow 0xFD
#define pastel_blue 0xBF
#define pastel_green 0x7D
#define pastel_purple 0xB3
#define pastel_orange 0xF6
#define light_purple 0xB3
#define light_pink 0xF3
#define light_orange 0xF6

// Switch and Key Assignments
#define SW_l1 0     // easy difficulty
#define SW_l2 1   // medium difficulty
#define SW_l3 2   // hard  difficulty
#define SW_up 3   // move cursor up
#define SW_down 4   // move cursor down
#define SW_right 5  // move cursor right
#define SW_left 6      // move cursor left
#define SW_ACTION_1 7   // toggle flag mode/ erase cell
#define SW_ACTION_2 8 // reveal cell/ enter digit mode
#define KEY_enter 0 // confirm action (when pressed reads as bit 0 in KEY1)
#define KEY_exit 0  

// 8x8 font for ASCII characters 'A' to 'Z', index 0='A', 25='Z'
static const unsigned char font8x8_AZ[26][8] = {
    // A
    { 0x00, 0x18, 0x24, 0x42, 0x7E, 0x42, 0x42, 0x00 },
    // B
    { 0x00, 0x7C, 0x42, 0x7C, 0x42, 0x42, 0x7C, 0x00 },
    // C
    { 0x00, 0x3C, 0x42, 0x40, 0x40, 0x42, 0x3C, 0x00 },
    // D
    { 0x00, 0x78, 0x44, 0x42, 0x42, 0x44, 0x78, 0x00 },
    // E
    { 0x00, 0x7E, 0x40, 0x7C, 0x40, 0x40, 0x7E, 0x00 },
    // F
    { 0x00, 0x7E, 0x40, 0x7C, 0x40, 0x40, 0x40, 0x00 },
    // G
    { 0x00, 0x3C, 0x42, 0x40, 0x4E, 0x42, 0x3C, 0x00 },
    // H
    { 0x00, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x00 },
    // I
    { 0x00, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00 },
    // J
    { 0x00, 0x1E, 0x0C, 0x0C, 0x0C, 0x4C, 0x38, 0x00 },
    // K
    { 0x00, 0x42, 0x44, 0x78, 0x44, 0x42, 0x42, 0x00 },
    // L
    { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7E, 0x00 },
    // M
    { 0x00, 0x42, 0x66, 0x5A, 0x5A, 0x42, 0x42, 0x00 },
    // N
    { 0x00, 0x42, 0x62, 0x52, 0x4A, 0x46, 0x42, 0x00 },
    // O
    { 0x00, 0x3C, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00 },
    // P
    { 0x00, 0x7C, 0x42, 0x42, 0x7C, 0x40, 0x40, 0x00 },
    // Q
    { 0x00, 0x3C, 0x42, 0x42, 0x4A, 0x44, 0x3A, 0x00 },
    // R      
    { 0x00, 0x7C, 0x42, 0x42, 0x7C, 0x44, 0x42, 0x00 },
    // S
    { 0x00, 0x3C, 0x42, 0x30, 0x0C, 0x42, 0x3C, 0x00 },
    // T
    { 0x00, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00 },
    // U
    { 0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00 },
    // V
    { 0x00, 0x42, 0x42, 0x42, 0x24, 0x24, 0x18, 0x00 },
    // W
    { 0x00, 0x42, 0x42, 0x5A, 0x5A, 0x66, 0x42, 0x00 },
    // X
    { 0x00, 0x42, 0x24, 0x18, 0x18, 0x24, 0x42, 0x00 },
    // Y
    { 0x00, 0x42, 0x24, 0x18, 0x18, 0x18, 0x18, 0x00 },
    // Z
    { 0x00, 0x7E, 0x04, 0x18, 0x20, 0x40, 0x7E, 0x00 }
};


#endif